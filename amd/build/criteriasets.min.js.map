{"version":3,"file":"criteriasets.min.js","sources":["../src/criteriasets.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Launches a modal dialogue that enables users to manage their criteria sets for the structured feedback plugin.\n *\n * See template: assignfeedback_structured/criteriasets\n *\n * @module     assignfeedback_structured/criteriasets\n * @class      criteriasets\n * @copyright  2017 Lancaster University {@link http://www.lancaster.ac.uk/}\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     Tony Butler <a.butler4@lancaster.ac.uk>\n */\n\nimport Ajax from 'core/ajax';\nimport CSModal from './csmodal';\nimport Notification from 'core/notification';\nimport {getStrings} from 'core/str';\nimport Templates from 'core/templates';\n\n/**\n * Init function.\n *\n * @param {number} contextId The context ID of the current assignment instance.\n * @param {boolean} manage Whether a full management interface is required (otherwise it's read only).\n * @param {boolean} canPublish Whether the current user can publish criteria sets.\n * @param {Object[]} ownedSets An array of data objects for all saved criteria sets owned by the current user.\n * @param {Object[]} sharedSets An array of data objects for any other available criteria sets.\n * @return {Promise} A promise.\n */\nexport const init = async(contextId, manage, canPublish, ownedSets, sharedSets) => {\n    const strings = await getStrings([\n        {key: 'criteriasetssaved', component: 'assignfeedback_structured'},\n        {key: 'criteriasetsmanage', component: 'assignfeedback_structured'}\n    ]);\n    let title = strings[0],\n        button = document.querySelector('#id_assignfeedback_structured_critset');\n    if (manage) {\n        title = strings[1];\n        button = document.querySelector('#id_assignfeedback_structured_critsetsmanage');\n    }\n    button.addEventListener('click', async() => {\n        const templateContext = {\n            contextId: contextId,\n            manage: manage,\n            canPublish: canPublish,\n            ownedSets: ownedSets,\n            sharedSets: sharedSets,\n        };\n        const modal = await CSModal.create({\n            title: title,\n            templateContext: templateContext,\n        });\n        const modalFooter = await modal.getFooter();\n        const refreshButton = modalFooter.find(modal.getActionSelector('refresh'));\n        refreshButton.on('click', async() => {\n            await refreshSets(modal, contextId, manage, canPublish);\n        });\n        // Refresh automatically when showing the modal.\n        await refreshSets(modal, contextId, manage, canPublish);\n\n        // Display a spinner while the modal is active.\n        if (!manage) {\n            await modalActive(button);\n        }\n    });\n};\n\n/**\n * Function to call a web service method via AJAX to update the list of criteria sets.\n *\n * @param {Object} modal The modal dialogue to be refreshed.\n * @param {number} contextId The context ID of the current assignment instance.\n * @param {boolean} manage Whether the modal provides a management interface.\n * @param {boolean} canPublish Whether the current user can publish criteria sets.\n * @return {Promise} A promise.\n */\nconst refreshSets = async(modal, contextId, manage, canPublish) => {\n    const modalBody = await modal.getBody(),\n        modalFooter = await modal.getFooter(),\n        refreshButton = modalFooter.find(modal.getActionSelector('refresh')),\n        buttonWidth = refreshButton.width(),\n        spinner = modalFooter.find('.loading-icon');\n\n    refreshButton.hide();\n    spinner.css({marginLeft: buttonWidth / 2 + 'px', marginRight: buttonWidth / 2 + 'px'});\n    spinner.show();\n\n    const request = Ajax.call([{\n        methodname: 'assignfeedback_structured_get_criteriasets',\n        args: {\n            contextid: contextId,\n            includeshared: !manage,\n        },\n    }]);\n    const response = await request[0];\n    const context = {\n        contextId: contextId,\n        manage: manage,\n        canPublish: canPublish,\n        ownedSets: response.ownedsets,\n        sharedSets: response.sharedsets,\n    };\n    const {html, js} = await Templates.renderForPromise('assignfeedback_structured/criteriasets_body', context);\n    Templates.replaceNodeContents(modalBody, html, js);\n    modalBody.find('.loading-icon').hide();\n    spinner.hide();\n    refreshButton.show();\n\n    // Set initial display of shared criteria sets.\n    const showShared = modalFooter.find(modal.getActionSelector('showshared')),\n        sharedSets = modalBody.find('.criteriasets-shared');\n    toggleShared(showShared, sharedSets);\n\n    // Toggle display of shared sets on checkbox click.\n    showShared.on('click', () => {\n        toggleShared(showShared, sharedSets);\n    });\n\n    // Get criteria data when expanded for the first time.\n    const criteriaToggle = modalBody.find('[data-toggle=\"collapse\"][href^=\"#criteria-data-\"]');\n    criteriaToggle.on('click', async function() {\n        if (this.classList.contains('collapsed')) {\n            const set = this.parentNode.parentNode;\n            const spinner = set.querySelector('.criteria-data').querySelector('.loading-icon');\n            spinner.style.display = 'initial';\n            await getCriteria(set);\n            spinner.style.display = 'none';\n        }\n    });\n\n    // Edit criteria set name on button click.\n    modalBody.find('[name=\"criteriaset-newname\"]').hide();\n    const editButton = modalBody.find('[data-set-action=\"editname\"]');\n    editButton.on('click keydown', function(e) {\n        if (e.type === 'click' || e.keyCode === 32) {\n            e.preventDefault();\n            const set = this.parentNode.parentNode,\n                setName = set.dataset.criteriasetName,\n                nameElement = this.parentNode.querySelector('[data-toggle=\"collapse\"]'),\n                nameInput = this.parentNode.querySelector('[name=\"criteriaset-newname\"]');\n\n            // Hide name and button and show input field.\n            this.style.display = 'none';\n            nameElement.style.display = 'none';\n            nameInput.value = setName;\n            nameInput.style.display = 'initial';\n            nameInput.focus();\n            nameInput.select();\n\n            // On blur or enter, hide input field and set the new name (if changed); abort name change on escape.\n            ['blur', 'keydown'].forEach((type) => {\n                nameInput.addEventListener(type, nameChangeHandler);\n            });\n        }\n    });\n\n    // Change shared visibility of a criteria set.\n    const sharedBox = modalBody.find('input[data-set-action=\"shared\"]');\n    sharedBox.on('change', async function() {\n        const spinner = this.parentNode.parentNode.querySelector('.loading-icon'),\n            set = this.parentNode.parentNode.parentNode,\n            updates = {\n                shared: this.checked,\n            };\n        spinner.style.display = 'initial';\n        await updateCriteriaSet(set, updates);\n        spinner.style.display = 'none';\n    });\n\n    // Delete criteria set.\n    const deleteButton = modalBody.find('[data-set-action=\"delete\"]');\n    deleteButton.on('click', async function() {\n        const set = this.parentNode.parentNode,\n            contextId = set.parentNode.parentNode.dataset.context,\n            setId = set.dataset.criteriasetId,\n            setName = set.dataset.criteriasetName,\n            spinner = this.parentNode.querySelector('.loading-icon');\n        const strings = await getStrings([\n            {key: 'criteriasetdelete', component: 'assignfeedback_structured'},\n            {key: 'criteriasetconfirmdelete', component: 'assignfeedback_structured', param: setName},\n            {key: 'yes'},\n            {key: 'no'},\n            {key: 'error'},\n            {key: 'criteriasetnotdeleted', component: 'assignfeedback_structured', param: setName},\n            {key: 'continue'},\n        ]);\n        await Notification.confirm(strings[0], strings[1], strings[2], strings[3],\n            async() => {\n                spinner.style.display = 'initial';\n                const request = Ajax.call([{\n                    methodname: 'assignfeedback_structured_delete_criteriaset',\n                    args: {\n                        contextid: contextId,\n                        criteriasetid: setId,\n                    },\n                }]);\n                const response = await request[0];\n                if (response === true) {\n                    set.style.display = 'none';\n                } else {\n                    await Notification.alert(strings[4], strings[5], strings[6]);\n                }\n                spinner.style.display = 'none';\n            }\n        );\n    });\n\n    // Use criteria set.\n    const useButton = modalBody.find('[data-set-action=\"use\"]');\n    useButton.on('click', async function() {\n        const set = this.parentNode.parentNode,\n            spinner = this.parentNode.querySelector('.loading-icon');\n        spinner.style.display = 'initial';\n\n        // Check each criterion name field for a value.\n        let use = true;\n        for (const name of document.querySelectorAll('input[id^=\"id_assignfeedback_structured_critname\"]')) {\n            if (name.value.trim()) {\n                use = false;\n                const strings = await getStrings([\n                    {key: 'criteriasetuse', component: 'assignfeedback_structured'},\n                    {key: 'criteriasetconfirmuse', component: 'assignfeedback_structured'},\n                    {key: 'yes'},\n                    {key: 'no'},\n                ]);\n                await Notification.confirm(strings[0], strings[1], strings[2], strings[3],\n                    async() => {\n                        await useSet(set, spinner);\n                        modal.destroy();\n                    },\n                    () => {\n                        spinner.style.display = 'none';\n                    }\n                );\n                // Break out of loop.\n                break;\n            }\n        }\n        if (use === true) {\n            await useSet(set, spinner);\n            modal.destroy();\n        }\n    });\n};\n\n/**\n * Function to show/hide a loading icon next to the 'Use/Save criteria set' buttons.\n *\n * @param {Object} button The button to launch the modal.\n * @return {Promise} A promise.\n */\nexport const modalActive = async(button) => {\n    const spinner = button.parentNode.querySelector('.loading-icon');\n    if (spinner) {\n        spinner.style.display = 'initial';\n    } else {\n        const {html, js} = await Templates.renderForPromise('core/loading', {});\n        Templates.appendNodeContents(button.parentNode, html, js);\n    }\n    // Hide the spinner when the button regains focus.\n    button.addEventListener('focus', () => {\n        const spinner = button.parentNode.querySelector('.loading-icon');\n        if (spinner) {\n            spinner.style.display = 'none';\n        }\n    });\n};\n\n/**\n * Function to determine and set the preferred display of shared criteria sets.\n *\n * @param {boolean} showShared Whether or not to show shared sets.\n * @param {Object} sharedSets The node containing the shared sets.\n */\nconst toggleShared = (showShared, sharedSets) => {\n    if (showShared.prop('checked')) {\n        sharedSets.show();\n    } else {\n        sharedSets.hide();\n    }\n};\n\n/**\n * Function to call a web service method via AJAX to fetch the criteria data for the given set.\n *\n * @param {Object} set The node containing the details of the criteria set to be fetched.\n * @return {Promise} A promise.\n */\nconst getCriteria = async(set) => {\n    const contextId = set.parentNode.parentNode.dataset.context,\n        setId = set.dataset.criteriasetId,\n        criteriaNode = set.querySelector('.criteria-data');\n\n    if (!criteriaNode.querySelectorAll('.assignfeedback_structured_criteria').length) {\n        const request = Ajax.call([{\n            methodname: 'assignfeedback_structured_get_criteria',\n            args: {\n                contextid: contextId,\n                criteriasetid: setId,\n            },\n        }]);\n        const response = await request[0];\n        const context = {\n            criteriaData: response\n        };\n        const {html, js} = await Templates.renderForPromise('assignfeedback_structured/criteria', context);\n        if (!criteriaNode.querySelectorAll('.assignfeedback_structured_criteria').length) {\n            Templates.appendNodeContents(criteriaNode, html, js);\n        }\n    }\n};\n\n/**\n * Event listener to handle the editing of a criteria set name in the 'manage' dialogue.\n * On blur or enter, it hides the input field and sets the new name (if changed).\n * On escape, it hides the input field and aborts the name change.\n *\n * @return {Promise} A promise.\n */\n const nameChangeHandler = async function() {\n    const nameElement = this.parentNode.querySelector('[data-toggle=\"collapse\"]'),\n        editButton = this.parentNode.querySelector('[data-set-action=\"editname\"]'),\n        set = this.parentNode.parentNode,\n        setName = set.dataset.criteriasetName,\n        rawName = this.value.trim(),\n        spinner = this.parentNode.querySelector('.loading-icon');\n\n    // Prevent multiple blur triggers with key presses.\n    if (event.type === 'keydown' && (event.keyCode === 13 || event.keyCode === 27)) {\n        this.removeEventListener('blur', nameChangeHandler);\n    }\n    if (event.keyCode === 27) {\n        // Cancel on escape.\n        event.stopPropagation();\n        this.style.display = 'none';\n        nameElement.style.display = 'initial';\n        editButton.style.display = 'initial';\n    } else if (event.type === 'blur' || event.keyCode === 13) {\n        // Save on enter (or any other loss of focus).\n        const newName = rawName.charAt(0).toUpperCase() + rawName.slice(1);\n        this.value = newName;\n        if (newName && newName !== setName) {\n            const updates = {\n                name: newName\n            };\n            spinner.style.display = 'initial';\n            const response = await updateCriteriaSet(set, updates);\n            if (response.success === true) {\n                this.style.display = 'none';\n                set.dataset.criteriasetName = newName;\n                nameElement.text = newName;\n                nameElement.style.display = 'initial';\n                editButton.style.display = 'initial';\n            } else {\n                await Notification.alert(response.title, response.body, response.label);\n                this.style.display = 'none';\n                nameElement.style.display = 'initial';\n                editButton.style.display = 'initial';\n            }\n            spinner.style.display = 'none';\n        } else {\n            this.style.display = 'none';\n            nameElement.style.display = 'initial';\n            editButton.style.display = 'initial';\n        }\n    }\n};\n\n/**\n * Function to call a web service method via AJAX to update a criteria set with the data provided.\n *\n * @param {Object} set The node containing the details of the criteria set to be updated.\n * @param {Object} updates A set of key/value pairs of data fields to be updated.\n * @return {Promise} A promise.\n */\nconst updateCriteriaSet = async(set, updates) => {\n    const contextId = set.parentNode.parentNode.dataset.context,\n        setId = set.dataset.criteriasetId;\n\n    const request = Ajax.call([{\n        methodname: 'assignfeedback_structured_update_criteriaset',\n        args: {\n            contextid: contextId,\n            criteriasetid: setId,\n            updates: updates,\n        },\n    }]);\n\n    return await request[0];\n};\n\n/**\n * Function to configure the current assignment to use the selected saved criteria set.\n *\n * @param {Object} set The node containing the details of the criteria set to be used.\n * @param {Object} spinner The node of a javascript loading icon.\n * @return {Promise} A promise.\n */\nconst useSet = async(set, spinner) => {\n    const criteriaNode = set.querySelector('.criteria-data');\n    if (!criteriaNode.querySelectorAll('.assignfeedback_structured_criteria').length) {\n        await getCriteria(set);\n    }\n    await processCriteriaData(criteriaNode);\n    spinner.style.display = 'none';\n};\n\n/**\n * Function to process the criteria data for a chosen criteria set and populate the config form fields.\n *\n * @param {Object} criteriaNode The node containing the criteria data to be processed.\n * @return {Promise} A promise.\n */\nconst processCriteriaData = async(criteriaNode) => {\n    const criteriaList = criteriaNode.querySelector('.criteria-list').children,\n        configData = [];\n\n    // Prepare the criteria data.\n    for (const criterion of criteriaList) {\n        const name = criterion.dataset.criterionName,\n            desc = criterion.dataset.criterionDesc;\n        configData.push({\n            name: name,\n            desc: desc,\n        });\n    }\n\n    // Append any additional criteria config fields as necessary.\n    const repeats = document.querySelector('[name=\"assignfeedback_structured_repeats\"]');\n    const critFields = parseInt(repeats.value);\n    if (configData.length > critFields) {\n        const newIndexes = [];\n        for (let i = critFields; i < configData.length; i++) {\n            newIndexes.push({\n                nodeIndex: i,\n                critIndex: i + 1,\n            });\n        }\n        // Use a template to add name and description fields.\n        const context = {\n            lastNodeIndex: critFields - 1,\n            lastCritIndex: critFields,\n            newIndexes: newIndexes,\n        };\n        const lastFieldId = 'id_assignfeedback_structured_critdesc_' + (critFields - 1);\n        const lastNode = document.querySelector('#fitem_' + lastFieldId);\n        const templateName = 'assignfeedback_structured/criterianodes';\n        const {html, js} = await Templates.renderForPromise(templateName, context);\n        Templates.replaceNode(lastNode, html, js);\n        await populateFields(configData);\n        // Set number of repeats to new value.\n        repeats.value = configData.length;\n    } else {\n        for (let j = 0; j < critFields; j++) {\n            // Clear any existing data.\n            document.querySelector('#id_assignfeedback_structured_critname_' + j).value = '';\n            document.querySelector('#id_assignfeedback_structured_critdesc_' + j).value = '';\n        }\n        await populateFields(configData);\n        // Freeze 'add criteria fields' button.\n        document.querySelector('#id_assignfeedback_structured_critfieldsadd').disabled = true;\n    }\n    if (configData.length >= critFields) {\n        // Unfreeze 'add criteria fields' button.\n        document.querySelector('#id_assignfeedback_structured_critfieldsadd').disabled = false;\n    }\n    // Unfreeze 'save criteria set' checkbox.\n    document.querySelector('#id_assignfeedback_structured_critsetsave').disabled = false;\n};\n\n/**\n * Function to populate fields for each criterion from config data.\n *\n * @param {Object[]} configData The config data to be inserted.\n * @return {Promise} A promise.\n */\nconst populateFields = async(configData) => {\n    configData.forEach((criterion, index) => {\n        Object.keys(criterion).forEach((fieldName) => {\n            const field = '#id_assignfeedback_structured_crit' + fieldName + '_' + index;\n            document.querySelector(field).value = criterion[fieldName];\n        });\n    });\n};\n"],"names":["async","contextId","manage","canPublish","ownedSets","sharedSets","strings","key","component","title","button","document","querySelector","addEventListener","templateContext","modal","CSModal","create","getFooter","find","getActionSelector","on","refreshSets","modalActive","modalBody","getBody","modalFooter","refreshButton","buttonWidth","width","spinner","hide","css","marginLeft","marginRight","show","request","Ajax","call","methodname","args","contextid","includeshared","response","context","ownedsets","sharedsets","html","js","Templates","renderForPromise","replaceNodeContents","showShared","toggleShared","this","classList","contains","set","parentNode","style","display","getCriteria","e","type","keyCode","preventDefault","setName","dataset","criteriasetName","nameElement","nameInput","value","focus","select","forEach","nameChangeHandler","updates","shared","checked","updateCriteriaSet","setId","criteriasetId","param","Notification","confirm","criteriasetid","alert","use","name","querySelectorAll","trim","useSet","destroy","appendNodeContents","prop","criteriaNode","length","criteriaData","editButton","rawName","event","removeEventListener","stopPropagation","newName","charAt","toUpperCase","slice","success","text","body","label","processCriteriaData","criteriaList","children","configData","criterion","criterionName","desc","criterionDesc","push","repeats","critFields","parseInt","newIndexes","i","nodeIndex","critIndex","lastNodeIndex","lastCritIndex","lastFieldId","lastNode","templateName","replaceNode","populateFields","j","disabled","index","Object","keys","fieldName","field"],"mappings":"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"}